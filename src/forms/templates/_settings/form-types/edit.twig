{% extends "sprout-module-core/_layouts/settings" %}
{% import "sprout-module-core/_macros/sproutcp" as sproutCp %}
{% import "_includes/forms" as forms %}

{% set module = sprout.modules.forms %}
{% set settings = module.getSettings() %}

{% set currentSubNavKey = 'form-types' %}

{% set crumbs = [
    { label: "Settings"|t('sprout-module-forms'), url: cpUrl('settings') },
    { label: "Form Types"|t('sprout-module-forms'), url: cpUrl('sprout/settings/forms/form-types') }
] %}

{% set fullPageForm = true %}

{% block actionButton %}

    <div class="buttons">
        <input type="submit" class="btn submit" value="{{ 'Save'|t('sprout-module-forms') }}">
    </div>

{% endblock %}

{% block content %}

    <header id="content-header" class="pane-header">
        {% set tabs = {
            general: {
                label: 'General'|t('sprout-module-forms'),
                url: '#general'
            },
            features: {
                label: 'Features'|t('sprout-module-forms'),
                url: '#features'
            },
            behavior: {
                label: 'Behavior'|t('sprout-module-forms'),
                url: '#behavior'
            },
            formFieldLayout: {
                label: 'Template Fields'|t('sprout-module-forms'),
                url: '#fields'
            },
        } %}
        {% include "_includes/tabs" with {
            containerAttributes: {
                id: 'tabs',
            },
        } %}
    </header>

    <div id="general">
        {{ forms.textField({
            label: "Name"|t('sprout-module-forms'),
            instructions: "How you will refer to this Form Type."|t('sprout-module-forms'),
            id: 'name',
            name: 'name',
            value: formType.name,
            errors: formType.getErrors('name'),
            warning: sproutConfigWarning(module, 'name'),
            required: true,
            first: true,
        }) }}

        {{ forms.textField({
            label: "Handle"|t('sprout-module-forms'),
            instructions: "How you will refer to this Form Type when rendering Form Elements as templates."|t('sprout-module-forms'),
            id: 'handle',
            name: 'handle',
            value: formType.handle,
            errors: formType.getErrors('handle'),
            warning: sproutConfigWarning(module, 'handle'),
            required: true,
        }) }}

        {% set generalConfig = craft.app.config.getGeneral() %}

        {% set formTemplates = {
            customTemplatesFolder: {
                heading: 'Custom Folder (Optional) <span class="info">Templates in this folder will receive the highest priority and override templates in both the Render and Default Folder locations. This folder can be helpful if you have a Form Type that requires a small variation on primary Form, Tab, or Field templates managed in the Render Folder.</span>',
                template: include('_includes/forms/autosuggest', {
                    name: 'customTemplatesFolder',
                    suggestions: sproutTemplateFolderSuggestions(),
                    suggestEnvVars: false,
                    suggestAliases: false,
                    value: formType.customTemplatesFolder ?? null,
                    disabled: false,
                    labelledBy: 'headingId',
                    describedBy: 'describedBy',
                    code: true,
                }),
            },
            renderTemplatesFolder: {
                heading: 'Render Folder (Craft) <span class="info">If you prefer organizing your custom form templates using the Craft element render convention, add your templates here. Form templates in the Render Folder will override templates in the Sprout Default Folder.</span>',
                template: alias(generalConfig.partialTemplatesPath ~ '/form/' ~ formType.handle),
            },
        } %}

        {% if formType.getDefaultTemplatesFolder() %}
            {% set formTemplates = formTemplates|merge( {
                defaultTemplatesFolder: {
                    heading: 'Default Folder (Sprout) <span class="info">Sprout default templates render a simple output for all supported form components. Override these if you have specific design requirements.</span>',
                    template: alias(formType.getDefaultTemplatesFolder()),
                }
            }) %}
        {% endif %}

        {{ forms.editableTableField({
            label: "Form Templates"|t('sprout-module=forms'),
            instructions: "The location of the form templates folder. As forms can reference many templates, this setting must point to the template folder. The existence of each form, tab, and field template is optional and the `form.render()` method will use the template from the highest priority match found."|t('sprout-module-forms'),
            id: 'formTemplates',
            name: 'formTemplates',
            cols: {
                heading: {
                    type: 'heading',
                    heading: "Type"|t('sprout-module-forms'),
                    thin: true
                },
                template: {
                    type: 'heading',
                    heading: "Form Templates Folder"|t('sprout-module-forms'),
                    info: "The folder that contains any or all form, tab, and field templates. Additional locations can be added in templates using `form.addTemplateFolderPaths`"|t('sprout-module-forms'),
                },
            }|filter,
            rows: formTemplates,
            fullWidth: true,
            allowAdd: false,
            allowDelete: false,
            allowReorder: false,
            errors: []|unique
        }) }}

        {{ forms.textField({
            label: "Form Type"|t('sprout-module-forms'),
            tip: 'This setting is not editable.'|t('sprout-module-forms'),
            value: formType.displayName(),
            disabled: true,
        }) }}

        {% css %}
            #formTemplates tbody tr th.heading-cell:nth-of-type(2) { border-left: 1px solid #cdd8e4; padding-top: 0px; padding-bottom: 0px; opacity: 1; }
        {% endcss %}
        {% js on ready %}
            $('[data-id="customTemplatesFolder"] th.heading-cell:nth-of-type(2)').addClass('code');
            $('[data-id="customTemplatesFolder"] th.heading-cell:nth-of-type(2)').css({backgroundColor: '#ffffff'})
            $('[data-id="renderTemplatesFolder"] th.heading-cell:nth-of-type(2)').addClass('code disabled');
            $('[data-id="renderTemplatesFolder"] th.heading-cell:nth-of-type(2)').css({paddingLeft: '20px'})
            $('[data-id="defaultTemplatesFolder"] th.heading-cell:nth-of-type(2)').addClass('code disabled');
            $('[data-id="defaultTemplatesFolder"] th.heading-cell:nth-of-type(2)').css({paddingLeft: '20px'})

            // Update the Partial Template Path in the UI when the Handle is updated
            $('#handle').on('input', function() {
            let renderTemplatesFolderCell = $('[data-id="renderTemplatesFolder"] th.heading-cell:nth-of-type(2)');
            let oldPartialTemplatePath = renderTemplatesFolderCell.text();
            let renderTemplatesFolderSegments = oldPartialTemplatePath.split("/");
            let oldHandle = renderTemplatesFolderSegments.pop();
            let newPartialTemplatePath = renderTemplatesFolderSegments.join("/") + '/' + $('#handle').val();
            console.log(newPartialTemplatePath);
            renderTemplatesFolderCell.text(newPartialTemplatePath);
            });
        {% endjs %}
    </div>

    <div id="features" class="hidden">

        <h3>{{ 'Features'|t('sprout-module-forms') }}</h3>

        <div class="user-permissions">
            <ul>
                {% set featureCount = featureSettings|length %}
                {% for name, settings in featureSettings %}
                    {% namespace 'featureSettings['~name~']' %}
                        {% set featureSettings = formType.featureSettings[name] ?? null %}
                        {% set toggleId = 'sprout-feature-' ~ name %}
                        {% set hasSettings = settings.settings is defined ? true : false %}

                        <li>
                            {{ forms.checkboxField({
                                label: settings.label,
                                value: true,
                                checked: featureSettings['enabled'] ?? false,
                                name: 'enabled',
                                toggle: hasSettings ? toggleId|id : null,
                            }) }}
                        </li>
                        {% if hasSettings %}
                            <li>
                                <ul id="{{ toggleId|id }}" class="hidden">
                                    {% for uid, integrationTypeName in settings.settings %}
                                        <li>
                                            {{ forms.checkboxField({
                                                label: integrationTypeName,
                                                value: true,
                                                checked: featureSettings['settings'][uid] ?? false,
                                                name: 'settings['~uid~']',
                                            }) }}
                                        </li>
                                    {% endfor %}
                                </ul>
                            </li>
                        {% endif %}
                    {% endnamespace %}
                {% endfor %}
            </ul>
        </div>

        <hr>

        {% for groupLabel, formFieldTypes in formType.getFormFieldFeatures() %}

            <div class="user-permissions">
                <h3>{{ '{groupName}'|t('sprout-module-forms', { groupName: groupLabel }) }}</h3>
                {{ tag('div', {
                    text: 'Select All'|t('sprout-module-forms'),
                    class: 'select-all'
                }) }}
                <ul>
                    {% for formFieldType, label in formFieldTypes %}
                        <li>
                            {{ forms.checkboxField({
                                label: label,
                                value: formFieldType,
                                checked: formType.getFormFieldTypesByType[formFieldType] ?? false,
                                name: 'enabledFormFieldTypes[]',
                                class: 'feature-sub-checkbox',
                            }) }}
                        </li>
                    {% endfor %}
                </ul>
            </div>

        {% endfor %}

    </div>

    {# {% css %} #}
    {#    .feature-sub-checkbox { #}
    {#    before { #}
    {#    border-top: 1px solid #eee; #}
    {#    content: ""; #}
    {#    display: block; #}
    {#    font-size: 0; #}
    {#    height: 0; #}
    {#    margin-top: 8px; #}
    {#    position: absolute; #}
    {#    width: 10px; #}
    {#    } #}
    {#    } #}
    {# {% endcss %} #}

    <div id="behavior" class="hidden">

        {{ forms.lightswitchField({
            label: "Save data to the Craft database"|t('sprout-module-forms'),
            instructions: "Disable this setting to stop Sprout Forms from saving all form submission data to the Craft database and hide the Submissions tab. Existing data will not be deleted, but will no longer be accessible via the Control Panel."|t('sprout-module-forms'),
            id: 'enableSaveData',
            name: 'enableSaveData',
            toggle: 'settings-savedatadetails',
            on: formType.enableSaveData,
            onLabel: "Save Data"|t('sprout-module-forms'),
            offLabel: "Don't Save Data"|t('sprout-module-forms'),
        }) }}

        {{ forms.lightswitchField({
            label: "Allow Form Submissions to be edited in front-end templates"|t('sprout-module-forms'),
            instructions: "Enable this setting to allow users to edit existing submissions in front-end templates. Enabling this feature may have some workflow or security considerations as forms allow anonymous submissions."|t('sprout-module-forms'),
            id: 'enableEditSubmissionViaFrontEnd',
            name: 'enableEditSubmissionViaFrontEnd',
            on: formType.enableEditSubmissionViaFrontEnd,
            onLabel: "Allow Edits"|t('sprout-module-forms'),
            offLabel: "Don't Allow Edits"|t('sprout-module-forms'),
        }) }}

        <hr>

        {% set assetField = create('craft\\fields\\Assets') %}

        {{ forms.checkboxSelectField({
            label: 'Allowed Asset Volumes'|t('sprout-forms'),
            instructions: 'The asset volumes that will be available to select when adding a File Upload field to a form.'|t('sprout-forms'),
            name: 'allowedAssetVolumes',
            options: assetField.getSourceOptions(),
            values: formType.allowedAssetVolumes,
            showAllOption: true,
        }) }}

        {{ forms.textField({
            label: "Default File Upload Location Subpath"|t('sprout-forms'),
            instructions: "The default subpath will be used whenever a new File Upload field is added to a form. The subfolder path can contain variables like the Form Entry ID <code>{id}</code> or the Form handle <code>{{ object.getForm().handle }}</code>"|t
                ('sprout-forms'),
            id: 'defaultUploadLocationSubpath',
            name: 'defaultUploadLocationSubpath',
            value: formType.defaultUploadLocationSubpath,
            placeholder: '{{ object.getForm().handle }}',
        }) }}

        <hr>

        {{ forms.editableTableField({
            label: "Form Type Metadata"|t('sprout-module-forms'),
            instructions: "The form metadata that will be captured on every form submission of this form type."|t('sprout-module-forms'),
            tip: "Configure global Form Metadata in the Default Settings for metadata that will be captured across all form types."|t('sprout-module-forms'),
            id: 'formTypeMetadata',
            name: 'formTypeMetadata',
            cols: {
                label: {
                    type: 'singleline',
                    heading: "Label"|t('sprout-module-forms'),
                    info: 'Short, user-friendly label of the metadatum to be captured.',
                },
                metadatumFormat: {
                    type: 'singleline',
                    heading: "Metadatum Format"|t('sprout-module-forms'),
                    info: 'Twig shortcut syntax that will be used to parse the metadatum into its captured value. i.e. `{craft.app.request.getParam("utm_source")}`',
                    class: 'code',
                },
            }|filter,
            rows: formType.formTypeMetadata|default([
                { label: '', metadatumFormat: '' },
            ]),
            fullWidth: true,
            allowAdd: true,
            allowReorder: true,
            allowDelete: true,
            errors: settings.getErrors('formTypeMetadata'),
        }) }}

    </div>

    <div id="fields" class="hidden">
        {% set fieldLayoutInstructions = "The content fields that can be used in this form type."|t('sprout-module-forms') %}

        {{ forms.fieldLayoutDesignerField({
            fieldLayout: formType.getFieldLayout(),
            errors: formType.getErrors('fieldLayout'),
        }) }}

    </div>

    {{ actionInput('sprout-module-forms/form-types/save') }}
    {{ redirectInput('sprout/settings/forms/form-types') }}

    {{ hiddenInput('uid', formType.uid) }}
    {{ hiddenInput('type', className(formType)) }}

{% endblock %}

    {% css %}
        .user-permissions h3 {
        float: left;
        padding-right: 0.5em;
        margin: 14px 0.5em 0 !important;
        margin-left: 0 !important;
        border-right: 1px solid #eee;
        }

        .user-permissions ul {
        clear: both;
        }

        .user-permissions .checkboxfield {
        margin: 0;
        }

        .select-all {
        color: var(--link-color);
        cursor: pointer;
        font-size: .9em;
        margin: 13px 0;
        display: inline-block;
        }
    {% endcss %}

    {% js %}
        let selectLinks = document.querySelectorAll('.select-all');

        selectLinks.forEach(function(link) {
        link.addEventListener('click', function() {
        // toggle all checkboxes in .checkbox-group div
        let checkboxes = this.nextElementSibling.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(function(checkbox) {
        checkbox.checked = !checkbox.checked;
        });
        // toggle text of .select-all div
        this.innerText = this.innerText === 'Select All' ? 'Deselect All' : 'Select All';
        });
        });
    {% endjs %}

{% if not formType.name %}
    {% js "new Craft.HandleGenerator('#name', '#handle');" %}
{% endif %}