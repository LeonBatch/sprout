{"version":3,"file":"accessibility-2384dda5.js","sources":["../../src/forms-frontend/Accessibility.js"],"sourcesContent":["/*\n * @link https://sprout.barrelstrengthdesign.com\n * @copyright Copyright (c) Barrel Strength Design LLC\n * @license https://craftcms.github.io/license\n */\n\n// Manage aria-checked values on Checkbox and Radio Button inputs\nclass SproutFormsCheckableInputs {\n\n    constructor(formId) {\n        this.formId = formId;\n        this.form = document.getElementById(this.formId);\n\n        this.checkableInputs = this.form.querySelectorAll('[type=checkbox], [type=radio]');\n        this.setAriaCheckedAttributes();\n        this.addCheckableInputsEventListeners();\n\n        this.requiredCheckboxFields = document.querySelectorAll('.checkboxes.required');\n        this.setRequiredCheckboxFieldEventListeners();\n    }\n\n    setAriaCheckedAttributes() {\n        for (let i = 0; i < this.checkableInputs.length; i += 1) {\n            if (this.checkableInputs[i].checked) {\n                this.checkableInputs[i].setAttribute('aria-checked', 'true');\n            }\n        }\n    }\n\n    addCheckableInputsEventListeners() {\n        let self = this;\n        for (let i = 0; i < this.checkableInputs.length; i += 1) {\n            this.checkableInputs[i].addEventListener('click', function(event) {\n                self.onCheckableInputChange(event);\n            }.bind(this), false);\n        }\n    }\n\n    onCheckableInputChange(event) {\n        let self = this;\n        if (event.target.checked) {\n            // Resets all buttons in radio group to false\n            if (event.target.getAttribute('type') === 'radio') {\n                self.resetRadioGroup(event.target);\n            }\n\n            event.target.setAttribute('aria-checked', 'true');\n        } else {\n            event.target.setAttribute('aria-checked', 'false');\n        }\n    }\n\n    resetRadioGroup(selectedRadioInput) {\n        let radioInputName = selectedRadioInput.getAttribute('name');\n        let allRadioInputs = document.querySelectorAll('#' + this.formId + ' [name=\"' + radioInputName + '\"] ');\n\n        for (let i = 0; i < allRadioInputs.length; i += 1) {\n            allRadioInputs[i].setAttribute('aria-checked', 'false');\n        }\n    }\n\n    setRequiredCheckboxFieldEventListeners() {\n        let self = this;\n        for (const checkboxField of this.requiredCheckboxFields) {\n            // Get all checkbox inputs for a given required Checkboxes field\n            let checkboxInputs = checkboxField.querySelectorAll('input[type=\"checkbox\"]');\n            for (const checkboxInput of checkboxInputs) {\n                checkboxInput.addEventListener('change', function() {\n                    let isSomethingChecked = self.isSomethingChecked(checkboxInputs);\n                    self.updateRequiredCheckboxInputAttributes(checkboxInputs, isSomethingChecked);\n                }.bind(this), false);\n            }\n        }\n    }\n\n    /**\n     * If a single checkbox is checked, a checkbox field satisfies the 'required' criteria\n     *\n     * @param checkboxInputs\n     * @returns {boolean}\n     */\n    isSomethingChecked(checkboxInputs) {\n        for (let i = 0; i < checkboxInputs.length; i++) {\n            if (checkboxInputs[i].checked) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * If a single checkbox is selected, remove all required attributes.\n     * If no checkboxes are checked, set all checkbox inputs to required\n     *\n     * @param checkboxInputs\n     * @param isSomethingChecked\n     */\n    updateRequiredCheckboxInputAttributes(checkboxInputs, isSomethingChecked) {\n        for (const checkboxInput of checkboxInputs) {\n            if (isSomethingChecked) {\n                checkboxInput.removeAttribute('required');\n                checkboxInput.removeAttribute('aria-required');\n            } else {\n                checkboxInput.setAttribute('required', 'true');\n                checkboxInput.setAttribute('aria-required', 'true');\n            }\n        }\n    }\n}\n\nwindow.SproutFormsCheckableInputs = SproutFormsCheckableInputs;\n"],"names":["SproutFormsCheckableInputs","formId","i","self","event","selectedRadioInput","radioInputName","allRadioInputs","checkboxField","checkboxInputs","checkboxInput","isSomethingChecked"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA,GAOA,MAAMA,CAA2B,CAE7B,YAAYC,EAAQ,CAChB,KAAK,OAASA,EACd,KAAK,KAAO,SAAS,eAAe,KAAK,MAAM,EAE/C,KAAK,gBAAkB,KAAK,KAAK,iBAAiB,+BAA+B,EACjF,KAAK,yBAAwB,EAC7B,KAAK,iCAAgC,EAErC,KAAK,uBAAyB,SAAS,iBAAiB,sBAAsB,EAC9E,KAAK,uCAAsC,CAC9C,CAED,0BAA2B,CACvB,QAASC,EAAI,EAAGA,EAAI,KAAK,gBAAgB,OAAQA,GAAK,EAC9C,KAAK,gBAAgBA,CAAC,EAAE,SACxB,KAAK,gBAAgBA,CAAC,EAAE,aAAa,eAAgB,MAAM,CAGtE,CAED,kCAAmC,CAC/B,IAAIC,EAAO,KACX,QAASD,EAAI,EAAGA,EAAI,KAAK,gBAAgB,OAAQA,GAAK,EAClD,KAAK,gBAAgBA,CAAC,EAAE,iBAAiB,QAAS,SAASE,EAAO,CAC9DD,EAAK,uBAAuBC,CAAK,CACpC,EAAC,KAAK,IAAI,EAAG,EAAK,CAE1B,CAED,uBAAuBA,EAAO,CAC1B,IAAID,EAAO,KACPC,EAAM,OAAO,SAETA,EAAM,OAAO,aAAa,MAAM,IAAM,SACtCD,EAAK,gBAAgBC,EAAM,MAAM,EAGrCA,EAAM,OAAO,aAAa,eAAgB,MAAM,GAEhDA,EAAM,OAAO,aAAa,eAAgB,OAAO,CAExD,CAED,gBAAgBC,EAAoB,CAChC,IAAIC,EAAiBD,EAAmB,aAAa,MAAM,EACvDE,EAAiB,SAAS,iBAAiB,IAAM,KAAK,OAAS,WAAaD,EAAiB,KAAK,EAEtG,QAAS,EAAI,EAAG,EAAIC,EAAe,OAAQ,GAAK,EAC5CA,EAAe,CAAC,EAAE,aAAa,eAAgB,OAAO,CAE7D,CAED,wCAAyC,CACrC,IAAIJ,EAAO,KACX,UAAWK,KAAiB,KAAK,uBAAwB,CAErD,IAAIC,EAAiBD,EAAc,iBAAiB,wBAAwB,EAC5E,UAAWE,KAAiBD,EACxBC,EAAc,iBAAiB,SAAU,UAAW,CAChD,IAAIC,EAAqBR,EAAK,mBAAmBM,CAAc,EAC/DN,EAAK,sCAAsCM,EAAgBE,CAAkB,CAChF,EAAC,KAAK,IAAI,EAAG,EAAK,EAG9B,CAQD,mBAAmBF,EAAgB,CAC/B,QAASP,EAAI,EAAGA,EAAIO,EAAe,OAAQP,IACvC,GAAIO,EAAeP,CAAC,EAAE,QAClB,MAAO,GAIf,MAAO,EACV,CASD,sCAAsCO,EAAgBE,EAAoB,CACtE,UAAWD,KAAiBD,EACpBE,GACAD,EAAc,gBAAgB,UAAU,EACxCA,EAAc,gBAAgB,eAAe,IAE7CA,EAAc,aAAa,WAAY,MAAM,EAC7CA,EAAc,aAAa,gBAAiB,MAAM,EAG7D,CACL,CAEA,OAAO,2BAA6BV"}