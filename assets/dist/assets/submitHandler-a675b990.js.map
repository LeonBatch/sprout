{"version":3,"file":"submitHandler-a675b990.js","sources":["../../src/forms-frontend/SubmitHandler.js"],"sourcesContent":["/*\n * @link https://sprout.barrelstrengthdesign.com\n * @copyright Copyright (c) Barrel Strength Design LLC\n * @license https://craftcms.github.io/license\n */\n\n/**\n * Manage the form submission process, with events\n */\nclass SproutFormsSubmitHandler {\n\n    constructor(formId, settings = {}) {\n        this.formId = formId;\n        this.form = document.getElementById(this.formId);\n        this.submitButtons = this.form.querySelectorAll('[type=\"submit\"]');\n        this.messageBoxId = this.formId + '-message-box';\n\n        this.successMessageClass = settings.successMessageClass ?? 'sproutforms-message-success';\n        this.errorMessageClass = settings.errorMessageClass ?? 'sproutforms-message-errors';\n        this.failureMessage = settings.failureMessage ?? 'Submission failed';\n\n        this.messageElement = settings.messageElement ?? 'div';\n        this.errorsContainerElement = settings.errorsContainerElement ?? 'ul.errors';\n        this.errorsItemElement = settings.errorsItemElement ?? 'li';\n\n        // The id used to identify a specific field\n        // Fields are targeted via their dynamic field handle: id=\"fields-{fieldHandle}-field\"\n        this.fieldWrapperIdPrefix = settings.fieldWrapperIdPrefix ?? 'fields-';\n        this.fieldWrapperIdSuffix = settings.fieldWrapperIdSuffix ?? '-field';\n\n        // The selector used to identify the wrapper for all fields\n        this.fieldWrapperQuerySelector = settings.fieldWrapperQuerySelector ?? '.field';\n\n        this.addFormSubmitEventListener();\n    }\n\n    addFormSubmitEventListener() {\n        let self = this;\n        self.form.addEventListener('submit', function(event) {\n            let targetForm = event.target;\n            if (targetForm) {\n                event.preventDefault();\n                self.handleBeforeFormSubmit();\n            }\n        }, false);\n    }\n\n    /**\n     * Manage the workflow before a form is submitted. This promise chain\n     * gives users a chance to do something before the submit behavior is\n     * run, and throws a cancel event if the submit behavior is aborted.\n     */\n    handleBeforeFormSubmit() {\n        let self = this;\n        this.getBeforeFormSubmitPromise()\n            .then(self.onFormSubmitEvent.bind(self))\n            .then(() => {\n                self.handleFormSubmit();\n            })\n            .catch(self.onFormSubmitCancelledEvent.bind(self));\n    }\n\n    /**\n     * Manage the form submission workflow. This promise chain\n     * dispatches a `sproutFormsSubmit` Event to allow another\n     * script to hijack and replace the form submit process, and if\n     * no other script takes over, runs the default form submit behavior.\n     *\n     * This is separated into a separate method so that when another\n     * script takes over the submission process (say, Invisible reCAPTCHA because\n     * it needs to wait for a callback that takes place outside the async promise\n     * chain) it can then call this method to continue the default submit process.\n     */\n    handleFormSubmit() {\n        let self = this;\n        this.getFormSubmitPromise()\n            .then(self.onAfterFormSubmitEvent.bind(self))\n            .catch(self.onFormSubmitCancelledEvent.bind(self));\n    }\n\n    /**\n     * Give third-party scripts a chance to take actions before the form is submitted\n     *\n     * Custom events are dispatched on the form element. Event Listeners can:\n     * - Use `event.target` to retrieve a copy of the form element\n     * - Use `event.preventDefault()` to cancel the default form submission\n     * - Use `event.detail.promises.push(yourPromise)` to add a promise to be evaluated\n     *\n     * Promises added to the `event.detail.promises` array should:\n     * - `resolve(true)` to continue the form submission\n     * - `resolve(false)` or `reject('whatever')` to cancel the form submission\n     *\n     * Example Listener:\n     * formElement.addEventListener('beforeSproutFormsSubmit', function(event) { ... }, false);\n     *\n     * @returns {Promise<boolean>}\n     */\n    getBeforeFormSubmitPromise() {\n        let self = this;\n\n        const beforeSproutFormsSubmitEvent = new CustomEvent('beforeSproutFormsSubmit', {\n            detail: {\n                promises: [],\n            },\n            bubbles: true,\n            cancelable: true,\n        });\n\n        return new Promise((resolve, reject) => {\n            if (!self.form.dispatchEvent(beforeSproutFormsSubmitEvent)) {\n                // beforeSproutFormsSubmit Event has been cancelled\n                return reject(false);\n            }\n\n            let promises = beforeSproutFormsSubmitEvent.detail.promises;\n\n            Promise.all(promises)\n                .then(function(values) {\n                    for (const value of values) {\n                        if (value === false) {\n                            // A promise added to the beforeSproutFormsSubmit Event returned false\n                            return reject(false);\n                        }\n                    }\n                })\n                .catch(function() {\n                    // A promise added to the beforeSproutFormsSubmit Event was rejected\n                    return reject(false);\n                });\n\n            // All beforeSproutFormsSubmit Event listeners and promises returned true\n            return resolve(true);\n        });\n    }\n\n    /**\n     * Give third-party scripts a chance to take over the submit behavior.\n     *\n     * - Use `event.preventDefault()` to cancel the default form submission\n     * - Use `event.detail.submitHandler.handleFormSubmit()` to let Sprout Forms\n     *   complete the submit behavior using the existing form settings\n     *\n     * @returns {Promise<boolean>}\n     */\n    onFormSubmitEvent() {\n        let self = this;\n\n        const sproutFormsSubmitEvent = new CustomEvent('onSproutFormsSubmit', {\n            detail: {\n                submitHandler: self,\n            },\n            bubbles: true,\n            cancelable: true,\n        });\n\n        return new Promise((resolve, reject) => {\n            if (!self.form.dispatchEvent(sproutFormsSubmitEvent)) {\n                return reject(false);\n            }\n\n            return resolve(true);\n        });\n    }\n\n    /**\n     * Submit the form.\n     *\n     * @returns {Promise<boolean>}\n     */\n    getFormSubmitPromise() {\n        let self = this;\n\n        let submissionMethod = self.form.dataset.submissionMethod;\n\n        // TODO - Refactor Promise chain\n        // It's probably better to check if async exists earlier in the process\n        // and to create two paths, async and sync, where sync does not need to\n        // fire after submit behavior\n        if (submissionMethod === 'async') {\n            return new Promise(async (resolve) => {\n                await self.submitAsync();\n                resolve(true);\n            });\n        } else {\n            self.form.submit();\n\n            // End the promise chain here. The form will redirect\n            // before any after submit behaviors can take place.\n            throw new Error('Form Redirected after Submission');\n        }\n    }\n\n    onAfterFormSubmitEvent() {\n        const afterSproutFormsSubmitEvent = new CustomEvent('afterSproutFormsSubmit', {\n            bubbles: true,\n        });\n\n        this.form.dispatchEvent(afterSproutFormsSubmitEvent);\n    }\n\n    onFormSubmitCancelledEvent() {\n        const cancelSproutFormsSubmitEvent = new CustomEvent('onSproutFormsSubmitCancelled', {\n            bubbles: true,\n        });\n\n        this.form.dispatchEvent(cancelSproutFormsSubmitEvent);\n    }\n\n    /**\n     * Handle async form submission\n     */\n    submitAsync() {\n        let self = this;\n\n        return new Promise(async (resolve) => {\n\n            let xhr = new XMLHttpRequest();\n\n            xhr.onreadystatechange = function() {\n                // Only run if the request is complete\n                if (xhr.readyState !== 4) {\n                    return;\n                }\n\n                /**\n                 * @param {Object} response\n                 * @param {boolean} response.success\n                 * @param {string} response.errorDisplayMethod\n                 * @param {string} response.message\n                 */\n                let response = JSON.parse(xhr.responseText);\n\n                if (xhr.status >= 200 || xhr.status < 300) {\n\n                    self.removeInlineErrors();\n\n                    let oldMessageBox = document.getElementById(self.messageBoxId);\n                    if (oldMessageBox !== null) {\n                        oldMessageBox.parentNode.removeChild(oldMessageBox);\n                    }\n\n                    if (response.success) {\n\n                        if (response.message) {\n                            self.displayMessageBox({\n                                id: self.messageBoxId,\n                                message: response.message,\n                                messageClass: self.successMessageClass,\n                            });\n                        }\n\n                        self.form.reset();\n\n                    } else {\n\n                        let globalErrorsEnabled = response && response.errorDisplayMethod\n                            ? ['global', 'both'].indexOf(response.errorDisplayMethod) >= 0\n                            : false;\n                        let inlineErrorsEnabled = response && response.errorDisplayMethod\n                            ? ['inline', 'both'].indexOf(response.errorDisplayMethod) >= 0\n                            : false;\n\n                        let globalErrors = [];\n\n                        if (globalErrorsEnabled) {\n                            for (let errors of Object.entries(response.errors)) {\n                                if (errors[1] !== undefined) {\n                                    globalErrors = [...globalErrors, ...errors[1]];\n                                }\n                            }\n                        }\n\n                        let errorListHtml = self.getErrorList(globalErrors);\n                        if (response.message || errorListHtml) {\n                            self.displayMessageBox({\n                                id: self.messageBoxId,\n                                message: response.message ?? null,\n                                messageClass: self.errorMessageClass,\n                                errors: errorListHtml,\n                            });\n                        }\n\n                        // Add inline errors to fields\n                        if (inlineErrorsEnabled) {\n                            for (let [fieldHandle, errors] of Object.entries(response.errors)) {\n                                let fieldId = self.fieldWrapperIdPrefix + fieldHandle + self.fieldWrapperIdSuffix;\n                                let fieldWrapper = document.getElementById(fieldId);\n\n                                // Make sure we don't display two copies of the inline errors box on subsequent requests\n                                let errorClasses = '.' + self.getTargetElementClasses(self.errorsContainerElement).join('.');\n                                let oldErrorList = fieldWrapper.querySelector(errorClasses);\n                                if (oldErrorList) {\n                                    oldErrorList.parentNode.removeChild(oldErrorList);\n                                }\n\n                                fieldWrapper.append(self.getErrorList(errors));\n                            }\n                        }\n                    }\n\n                } else {\n                    // Something went wrong, response outside the range 200-299\n                    let errors = {};\n\n                    if (typeof response.error === 'string') {\n                        errors = self.getErrorList([response.error]);\n                    }\n\n                    self.displayMessageBox({\n                        id: self.messageBoxId,\n                        message: '<p>' + self.failureMessage + '</p>',\n                        messageClass: self.errorMessageClass,\n                        errors: errors,\n                    });\n                }\n\n                resolve(true);\n            };\n\n            let formData = new FormData(self.form);\n\n            xhr.open('POST', '/');\n            xhr.setRequestHeader('Accept', 'application/json');\n            xhr.send(formData);\n        });\n    }\n\n    displayMessageBox(config) {\n        let self = this;\n        let id = config.id ?? null;\n        let message = config.message ?? null;\n        let messageClass = config.messageClass ?? '';\n        let errors = config.errors ?? null;\n\n        let messageBox = self.getElementWithClasses(self.messageElement);\n\n        if (id) {\n            messageBox.setAttribute('id', id);\n        }\n\n        messageBox.classList.add(messageClass);\n        messageBox.innerHTML = message;\n\n        if (errors) {\n            messageBox.append(errors);\n        }\n\n        let oldMessageBox = document.getElementById(self.messageBoxId);\n\n        if (oldMessageBox) {\n            // If a message box already exists, replace it\n            oldMessageBox.parentNode.replaceChild(messageBox, oldMessageBox);\n        } else {\n            self.form.prepend(messageBox);\n        }\n    }\n\n    removeInlineErrors() {\n        let self = this;\n\n        let classesArray = self.getTargetElementClasses(self.errorsContainerElement);\n        let errorListClasses = classesArray.map(cssClass => {\n            return '.' + cssClass;\n        });\n        let fields = document.querySelectorAll(self.fieldWrapperQuerySelector);\n        for (const field of fields) {\n            let oldErrorList = field.querySelector(errorListClasses);\n            if (oldErrorList !== null) {\n                oldErrorList.parentNode.removeChild(oldErrorList);\n            }\n        }\n    }\n\n    /**\n     * Returns a container with a list of errors\n     *\n     * @param errors\n     * @returns {HTMLElement}\n     */\n    getErrorList(errors) {\n        let self = this;\n        let unorderedListElement = self.getElementWithClasses(self.errorsContainerElement);\n        for (let error of errors) {\n            let listElement = self.getElementWithClasses(self.errorsItemElement);\n            listElement.innerHTML = error;\n            unorderedListElement.appendChild(listElement);\n        }\n\n        return unorderedListElement;\n    }\n\n    /**\n     * Converts a class definition setting string into an element with classes\n     *\n     * Example:\n     * ul.errors => <ul class=\"errors\">\n     * div.message.box => <div class=\"message box\">\n     *\n     * @param value\n     * @returns {HTMLElement|null}\n     */\n    getElementWithClasses(value) {\n        let self = this;\n\n        if (typeof value !== 'string') {\n            return null;\n        }\n\n        let elementName = self.getTargetElementName(value);\n        let cssClasses = self.getTargetElementClasses(value);\n\n        if (!elementName) {\n            return null;\n        }\n\n        let element = document.createElement(elementName);\n\n        if (cssClasses !== null && cssClasses.length) {\n            for (const cssClass of cssClasses) {\n                element.classList.add(cssClass);\n            }\n        }\n\n        return element;\n    }\n\n    /**\n     * Returns the first segment of a class definition setting to be used as the target element\n     *\n     * @param value\n     * @returns {string|null}\n     */\n    getTargetElementName(value) {\n        let parts = value.split('.');\n        return parts.length > 0 ? parts[0] : null;\n    }\n\n    /**\n     * Removes the first segment of  of a class definition setting and returns any additional segments\n     * as an array to be used as the target element classes\n     *\n     * @param value\n     * @returns {array|null}\n     */\n    getTargetElementClasses(value) {\n        let parts = value.split('.');\n        return parts.length > 1 ? parts.slice(1, parts.length) : null;\n    }\n}\n\nwindow.SproutFormsSubmitHandler = SproutFormsSubmitHandler;\n"],"names":["SproutFormsSubmitHandler","formId","settings","self","event","beforeSproutFormsSubmitEvent","resolve","reject","promises","values","value","sproutFormsSubmitEvent","afterSproutFormsSubmitEvent","cancelSproutFormsSubmitEvent","xhr","response","oldMessageBox","globalErrorsEnabled","inlineErrorsEnabled","globalErrors","errors","errorListHtml","fieldHandle","fieldId","fieldWrapper","errorClasses","oldErrorList","formData","config","id","message","messageClass","messageBox","errorListClasses","cssClass","fields","field","unorderedListElement","error","listElement","elementName","cssClasses","element","parts"],"mappings":"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"}